#  create-package.yml
#  Created: ter 17 dez 2024 22:42:36 -04
#  Altered: ter 17 dez 2024 22:42:36 -04
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
name: 💿 Build Package VoidLinux

# Gatilhos para o workflow
on:
  #  push:
  #    branches:
  #      - main
  repository_dispatch: # aguarda um evento externo para iniciar o workflow (útil para automações externas que acionam o GitHub Actions).
    types:
      - "ISO-*"
  workflow_dispatch:
    inputs:
      teste_input:
        type: boolean
        description: "Enable only test"
        required: false
        default: false
      edition:
        type: choice
        description: "Edition"
        options:
          - base
          - awesome
          - cinnamon
          - enlightnment
          - fluxbox
          - gnome
          - kde
          - xfce
          - all
        default: "xfce"
      vol_id:
        type: string
        description: "Nome do VOLUME da ISO"
        required: true
        default: "VOID_LIVE"
      tmate:
        type: boolean
        description: "Enable debugging with tmate"
        required: false
        default: false
      release_tag:
        type: string
        description: "Release tag for the ISO"
        required: false

  schedule:
    #- cron: "0 6 * * *" # Roda todo dia às 06:00 UTC
    - cron: "0 18 * * 5" # Roda toda sexta-feira às 18:00 UTC

env:
  TELEGRAM_TOKEN: "${{ secrets.TOKEN_BOT }}"
  #GITHUB_TOKEN: "${{ secrets.TOKEN_RELEASE }}"
  #GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_TOKEN: "${{ secrets.ORGANIZATION_TOKEN }}"
  CHAT_ID: "${{ secrets.CHAT_ID }}"
  started_by_user: "${{ github.actor }}"
  triggered_by_user: "${{ github.triggering_actor }}"
  repo_path: "${{ secrets.PKGBUILD_DIR }}"
  iso_distroname: "${{ github.event.client_payload.distroname || inputs.distroname || 'voidlinux' }}"
  #iso_manjaro_branch: "${{ github.event.client_payload.manjaro_branch || inputs.manjaro_branch}}"
  #iso_biglinux_branch: "${{ github.event.client_payload.biglinux_branch || inputs.biglinux_branch}}"
  #iso_bigcommunity_branch: "${{ github.event.client_payload.community_branch || inputs.community_branch}}"
  #iso_chililinux_branch: "${{ github.event.client_payload.chililinux_branch || inputs.chililinux_branch}}"
  #iso_build_dir: "${{ github.event.client_payload.build_dir || inputs.build_dir}}"
  iso_edition: "${{ github.event.client_payload.edition || inputs.edition}}"
  iso_release_tag: "${{ github.event.client_payload.release_tag || inputs.release_tag }}"
  #iso_kernel: "${{ github.event.client_payload.kernel || inputs.kernel }}"
  iso_basename: "void-live-${{ github.event.client_payload.edition || inputs.edition}}-x86_64_${{ github.event.client_payload.release_tag || inputs.release_tag }}"
  vol_id: "${{ github.event.client_payload.vol_id || inputs.vol_id }}"
  DEBUG: "${{ github.event.client_payload.tmate || inputs.tmate || false }}"
  tmate: "${{ github.event.client_payload.tmate || inputs.tmate || false }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }} # Saída do job
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Obter a hora atual
        id: time
        run: |
          #Obter a hora atual
          #echo "::set-output name=time::$(date +'%Y.%m.%d-%H%M')"
          echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Capturar hora de início do workflow
        id: start-time
        shell: bash
        run: |
          START_TIME=$(date +"%Y-%m-%d %H:%M:%S")  # Hora completa
          START_TIMESTAMP=$(date +%s)  # Timestamp em segundos
          echo "Início do Workflow: $START_TIME"
          echo "START_TIME=$START_TIME"             >> $GITHUB_ENV
          echo "START_TIMESTAMP=$START_TIMESTAMP"   >> $GITHUB_ENV
          echo "START_TIME='$START_TIME'"           >> shared_file.txt
          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt

      - name: Install dependencies in HOST
        shell: bash
        run: |
          #Install dependencies in HOST
          #sudo apt-get update
          #sudo apt-get autoremove
          #sudo apt-get install -y inetutils-tools duf tree tmate
          sudo apt-get install -y inetutils-tools duf tree

      #      - name: Setup TMATE Session in HOST
      #        uses: mxschmitt/action-tmate@v3
      #        with:
      #          install-dependencies: false
      #          detached: true

      - name: Set up volume directory in HOST
        shell: bash
        run: |
          #Set up volume directory in HOST
          sudo mkdir -p /mnt/var_lib_manjaro_tools_buildiso
          sudo mkdir -p /mnt/var_cache_manjaro_tools_iso
          sudo mkdir -p /mnt/lfs

      - name: Enviar notificação para o Telegram
        shell: bash
        run: |
          #Enviar notificação para o Telegram
          echo "ISO_BRANCH='$iso_branch'" >> GITHUB_ENV
          echo "ISO_BRANCH='$iso_branch'" >> shared_file.txt
          link_action=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}

          MESSAGE="🚀 <b>[step 1/3] build-iso-void - INICIANDO WORKFLOW</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Job URL:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>
          <b>Workflow:</b> <code>build-iso-void/create-iso.yml</code>
          <b>Iniciado/Triggered:</b> <code>${started_by_user}/${triggered_by_user}</code>
          <b>Inicio:</b> <code>${{ env.START_TIME }}</code>
          <b>Distroname:</b> <code>${iso_distroname}</code>
          <b>Iso Profile:</b> <code>${{ github.event.client_payload.iso_profiles_repo || inputs.iso_profiles_repo }}</code>
          <b>Edition:</b> <code>${iso_edition}</code>
          <b>Build dir:</b> <code>${iso_build_dir}</code>
          <b>Release:</b> <code>${iso_release_tag}</code>
          <b>Kernel:</b> <code>${iso_kernel}</code>
          <b>Tmate:</b> <code>${{ env.DEBUG }}</code>
          <b>ISO Name:</b> <code>void-live-${iso_edition}-x86_64_${iso_release_tag}</code>"
          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$MESSAGE")${reset}"
          # Envia a mensagem original com HTML para o Telegram
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"

      #      - name: Cria um arquivo de variaveis para compartilhar entre jobs
      #        shell: bash
      #        run: |
      #          #Cria um arquivo de variaveis para compartilhar entre jobs
      #          echo "START_TIME='$START_TIME'"           >> shared_file.txt
      #          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt
      #          echo "ISO_BRANCH='$iso_branch'"           >> shared_file.txt

      - name: Obter nome do repositório
        id: get-repo-name
        run: |
          #Obter nome do repositório
          #echo "::set-output name=repo_name::$(basename $GITHUB_REPOSITORY)"
          echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-file
          path: shared_file.txt

      - name: Display the current user in HOST
        run: |
          # Display the current user in host
          echo "#########################################"
          echo "Current host is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          #df -hT
          duf
          echo "#########################################"
          ls
          echo "#########################################"

  build:
    name: Build ISO void-live-${{ github.event.client_payload.edition || inputs.edition}}-x86_64_${{ github.event.client_payload.release_tag || inputs.release_tag }}
    runs-on: ubuntu-latest
    needs: [setup] # Espera o job "setup" terminar
    env:
      #REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }} # Acesso à variável de ambiente definida no job anterior
      REPO_NAME: "${{ github.repository }}"
    container:
      #image: vcatafesta/voidlinux-docker:latest
      #image: vcatafesta/voidlinux-docker:1.1
      image: vcatafesta/voidlinux-docker:1.2 #ter 17 dez 2024 21:48:17 -04
      options: --privileged
      volumes:
        - /mnt/var_lib_manjaro_tools_buildiso:/var/lib/manjaro-tools/buildiso
        - /mnt/var_cache_manjaro_tools_iso:/var/cache/manjaro-tools/iso
        - /mnt/lfs:/mnt/lfs

    steps:
      - name: Download artifact shared-file
        uses: actions/download-artifact@v4
        with:
          name: shared-file

      - name: Exibir e carregar variáveis do arquivo shared_file.txt no CONTAINER
        shell: bash
        run: |
          #Exibir e carregar variáveis do arquivo shared_file.txt no CONTAINER
          cat shared_file.txt
          # Atribuir o conteúdo do arquivo à variável START_TIME
          #START_TIME="$(<shared_file.txt)"
          source shared_file.txt
          # Definir a variável START_TIME para outros jobs
          echo "START_TIME=$START_TIME"           >> $GITHUB_ENV
          echo "START_TIMESTAMP=$START_TIMESTAMP" >> $GITHUB_ENV
          echo "ISO_BRANCH=$ISO_BRANCH"           >> $GITHUB_ENV

      - name: Checkout repository chililinux/build-iso-void
        uses: actions/checkout@v4
        with:
          #fetch-depth: 0    # All commit history is downloaded
          fetch-depth: 1 # Only the most recent commit of the branch will be downloaded

      - name: Set up volume directory in CONTAINER
        run: |
          #Set up volume directory in HOST
          mkdir -p /mnt/lfs
          ln -sf /mnt/lfs /lfs

      - name: Install Required Packages and Libraries no CONTAINER
        run: |
          #Install Required Packages and Libraries in CONTAINER
          #{
          #echo 'repository=https://repo-fastly.voidlinux.org/current'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
          #echo 'repository=https://chililinux.com/void/current'
          #} > /etc/xbps.d/00-repository-main.conf

          xi -u --yes
          xbps-install -Syu -ff \
            xbps \
            xtools \
            bash \
            sudo \
            openssh \
            tmate \
            xz \
            zip \
            p7zip \
            jq \
            github-cli \
            kmod \
            ncurses \
            which \
            vpm \
            libstdc++ \
            nano \
            curl \
            git \
            bash \
            tree \
            duf \
            gettext \
            rsync \
            util-linux \
            coreutils \
            sed \
            grep \
            btrfs-progs \
            e2fsprogs \
            exfatprogs \
            dosfstools \
            xfsprogs
          xbps-remove -oO --yes

      - name: Create user builduser in CONTAINER
        run: |
          #Create user builduser in container
          useradd -m -G wheel,audio,video,cdrom,optical,kvm,xbuilder builduser || true
          id builduser

      - name: Initial Debug in CONTAINER
        run: |
          #Initial Debug
          echo "Workflow started"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo "Edition: ${{ github.event.client_payload.edition || inputs.edition }}"
          echo "Tmate from payload: ${{ github.event.client_payload.tmate || inputs.tmate != false && inputs.tmate }}"
          echo "Full github event: ${{ toJson(github.event) }}"

      - name: Display the current user in CONTAINER
        shell: bash
        run: |
          #Display the current user in CONTAINER
          echo "#########################################"
          echo "Current container is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          #df -hT
          duf
          echo "#########################################"
          ls -lah --color=auto /mnt
          echo "#########################################"
          tree -d /mnt
          echo "#########################################"

      - name: Set release tag manually
        id: date
        run: |
          # Set release tag manually
          RELEASE_TAG="${iso_release_tag:-$(date '+%Y-%m-%d_%H-%M')}"
          echo "RELEASE_TAG=$RELEASE_TAG" >> "$GITHUB_ENV"

      - name: Build ISO void-live-${{ github.event.client_payload.edition || inputs.edition}}-x86_64_${{ github.event.client_payload.release_tag || inputs.release_tag }}
        if: ${{ inputs.teste_input != true }}
        uses: ./
        id: build
        with:
          #vol_id: ${{ github.event.client_payload.vol_id || inputs.vol_id }}
          #edition: ${{ github.event.client_payload.edition || inputs.edition }}
          #release_tag: ${{ github.event.client_payload.release_tag || inputs.release_tag }}
          #github_token: ${{ secrets.ORGANIZATION_TOKEN }}
          vol_id: "${{env.vol_id}}"
          edition: "${{env.iso_edition}}"
          release_tag: "${{env.RELEASE_TAG}}"
          github_token: "${{env.GITHUB_TOKEN}}"
          tmate: "${{ env.DEBUG }}"

      #ponto de retorno do action.yml
      - name: Set ISO path
        shell: bash
        run: |
          # Set ISO path
          #temporario - para testes
          #WORK_PATH='/__w/build-iso/build-iso'
          #ISO_BASENAME="${iso_distroname}_${ISO_BRANCH^^}_${iso_edition}_${iso_release_tag}.iso"
          #{
          #  echo "WORK_PATH=$WORK_PATH"
          #  echo "ISO_BASENAME=$ISO_BASENAME"
          #} >> $GITHUB_ENV
          #echo "ISO_PATH=${WORK_PATH}/${ISO_BASENAME}" >> $GITHUB_ENV
          #touch "${WORK_PATH}/${ISO_BASENAME}"
          #temporario - para testes
          echo "ISO_PATH=${{ env.WORK_PATH }}/${{ env.ISO_BASENAME }}" >> $GITHUB_ENV

      - name: Calculate ISO MD5 Hash
        shell: bash
        run: |
          # Calculate ISO MD5 Hash
          source /tmp/send_telegram_message.sh
          replicate '='
          ls -lah
          replicate '='
          msg "Calculating MD5 hash for ISO file ${ISO_PATH}"
          pushd "${{ env.WORK_PATH }}" || true
          if [[ -f "${{ env.ISO_BASENAME }}" ]]; then
            md5sum "${{ env.ISO_BASENAME }}" > "${{ env.ISO_BASENAME }}.md5"
            msg_info "MD5 '$ISO_BASENAME.md5' hash calculated and saved:"
            cat "${{ env.ISO_BASENAME }}.md5"
          else
            msg_warning "Error: ${{ env.ISO_BASENAME }} file not found at ${{ env.WORK_PATH }}"
            exit 1
          fi
          ls -lah --color=auto
          replicate '='
          popd || true

      - name: Prepare ISO for release (7z)
        id: prepare-iso
        shell: bash
        run: |
          #Prepare ISO for release (7z)
          source /tmp/send_telegram_message.sh
          # Prepara a mensagem
          MESSAGE="⏳ <b>[step 2/3] build-iso-void - Prepare ISO for release (7z)</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-iso-void/create-iso.yml</code>
          <b>Inicio:</b> <code>${START_TIME}</code>"

          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$MESSAGE")${reset}"
          # Envia a mensagem original com HTML para o Telegram
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"

          replicate '='
          ls -lah
          release=$(basename "${ISO_PATH}" .iso)
          release_name="${release}"
          7z a -v2000m ${release}.7z "${ISO_PATH}" # Compacta e divide em partes de 2000 MB
          echo "release=${release}"      >> "$GITHUB_OUTPUT"
          echo "release_name=${release}" >> "$GITHUB_OUTPUT"
          msg_info "ISO ${release} prepared for release"
          replicate '='
          ls -lah
          replicate '='
          # Debug
          msg_info "ISO_PATH (original): ${ISO_PATH}"
          msg_info "7z_PATH (7z)       : ${release}.7z*"
          msg_info "ISO_PATH (md5)     : ${ISO_PATH}.md5"
          msg_info "release            : ${release}"
          msg_info "release_name       : ${release_name}"
          replicate '='

      - name: Upload ISO as artifact
        if: ${{ inputs.teste_input != true }}
        uses: actions/upload-artifact@v4
        with:
          #name: Full_ISO_${{ steps.prepare-iso.outputs.release_name }}
          #name: ${{ steps.prepare-iso.outputs.release_name }}
          name: ${{ env.ISO_BASENAME }}
          path: |
            ${{ env.ISO_FULLNAME }}
            ${{ env.ISO_FULLNAME }}.md5
          if-no-files-found: warn
          include-hidden-files: false

      - name: Create Release
        if: ${{ inputs.teste_input != true }}
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ISO_PATH }}.md5
            ${{ env.ISO_PATH }}.pkgs
            ${{ steps.prepare-iso.outputs.release_name }}.7z.*
          tag_name: ${{ env.ISO_TAG_NAME }}
          name: ${{ steps.prepare-iso.outputs.release_name }}
          generate_release_notes: true
          body: |
            - **Data e Hora        :** ${{ env.START_TIME }}
            - **Arquivo ISO        :** ${{ env.ISO_BASENAME }}
            - **Arquivo MD5        :** ${{ env.ISO_BASENAME }}.md5
            - **Nome do Repositório:** ${{ env.REPO_NAME }}
          draft: false
          prerelease: false
          fail_on_unmatched_files: false

      - name: Get Artifact URL
        id: get-artifact-url
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          #FILE_NAME: "${ISO_BASENAME%.iso}"
          FILE_NAME: "${{ steps.prepare-iso.outputs.release_name }}"
          RUN_ID: "${{ github.run_id }}"
          REPO: "${{ github.repository }}"
        run: |
          # Get Artifact URL
          artifacts=$(gh api \
            -H "Accept: application/vnd.github+json"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
             /repos/$REPO/actions/runs/$RUN_ID/artifacts)

            echo "$artifacts" | jq .

            artifact_id=$(echo "$artifacts" | jq -r --arg file_name "$FILE_NAME" '.artifacts[] | select(.name==$file_name) | .id')
            echo "artifact_id=$artifact_id" >> $GITHUB_ENV
            echo "Artifact ID: $artifact_id"

            artifact_size_in_bytes=$(echo "$artifacts" | jq -r --arg file_name "$FILE_NAME" '.artifacts[] | select(.name==$file_name) | .size_in_bytes')
            echo "artifact_size_in_bytes=$artifact_size_in_bytes" >> $GITHUB_ENV
            echo "Artifact SiZE: $artifact_size_in_bytes"

            artifact_url=https://github.com/$REPO/actions/runs/$RUN_ID/artifacts/$artifact_id
            echo "artifact_url=$artifact_url" >> $GITHUB_ENV
            echo "Artifact URL: $artifact_url"

      - name: Configurar chave SSH e Adicionar chave do host remoto ao known_hosts
        if: ${{ inputs.teste_input != true }}
        run: |
          #Configurar chave SSH e Adicionar chave do host remoto ao known_hosts
          mkdir -p /root/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /root/.ssh/id_rsa
          chmod 600 /root/.ssh/id_rsa
          ssh-keyscan -p 65002 -H ${{ secrets.SERVER_HOST }} >> /root/.ssh/known_hosts
          ssh-keyscan -p 65002 -H ${{ secrets.SERVER_HOST }} >> /root/.ssh/known_hosts2

      - name: Enviar arquivo ISO para o servidor via SCP com porta customizada
        if: ${{ inputs.teste_input != true }}
        run: |
          #Enviar arquivo ISO para o servidor via SCP com porta customizada
          scp -P 65002 \
              -v \
              -o StrictHostKeyChecking=no \
              -i /root/.ssh/id_rsa \
              ${{ env.ISO_FULLNAME }} \
              ${{ env.ISO_FULLNAME }}.md5 \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/void/iso

      - name: Telegram Alert Fail
        if: failure()
        shell: bash
        run: |
          #Telegram Alert Fail - Send a Telegram alert if the build fails
          link_action=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

          MESSAGE="🚨 <b>FALHA ao criar ISO:</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Iso:</b> <code>${{ github.event.action }}</code>
          <b>URL erro:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>"

          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$MESSAGE")${reset}"

          # Envia a mensagem para o Telegram com formatação HTML
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"

      - name: Capturar hora de término e calcular duração
        shell: bash
        run: |
          #Capturar hora de término e calcular duração
          sh_calc_duration_via_normal() {
            # Configurações
            START_TIME="${{ env.START_TIME }}"
            START_TIMESTAMP="${{ env.START_TIMESTAMP }}"
            END_TIME=$(date +"%Y-%m-%d %H:%M:%S")
            END_TIMESTAMP=$(date +%s)
            # Calcula a duração em segundos, horas, minutos e segundos
            duration=$((END_TIMESTAMP - START_TIMESTAMP))
            hours=$((duration / 3600))
            minutes=$(( (duration % 3600) / 60 ))
            seconds=$((duration % 60))
          }

          sh_calc_duration_via_api() {
            # Endpoint da API
            API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs"

            # Fazendo a requisição para obter o último workflow run
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                              -H "Accept: application/vnd.github+json" \
                              "$API_URL")

            # Extraindo os horários (created_at e updated_at) do último workflow
            created_at=$(echo "$response" | jq -r '.workflow_runs[0].created_at')
            updated_at=$(echo "$response" | jq -r '.workflow_runs[0].updated_at')

            # Verificando se os valores foram obtidos
            if [[ -z "$created_at" || -z "$updated_at" ]]; then
              echo "Erro: Não foi possível obter os dados do workflow."
              exit 1
            fi

            # Convertendo horários para timestamps
            start_ts=$(date -d "$created_at" +%s)
            end_ts=$(date -d "$updated_at" +%s)

            START_TIME="$created_at"
            END_TIME="$updated_at"

            # Calculando a duração em segundos
            duration=$((end_ts - start_ts))

            # Convertendo para formato legível (HH:MM:SS)
            hours=$((duration / 3600))
            minutes=$(((duration % 3600) / 60))
            seconds=$((duration % 60))

            # Exibindo o tempo total
            printf "Tempo total da execução: %02d:%02d:%02d\n" "$hours" "$minutes" "$seconds"
          }

          sh_calc_duration_via_normal
          #sh_calc_duration_via_api

          # Obtém o ID do run e o URL do artefato a partir das variáveis de ambiente
          RUN_ID="${{ github.run_id }}"
          link_action="${{ env.artifact_url }}"
          file_name="${{ steps.prepare-iso.outputs.release_name }}"

          # Converte o tamanho do artefato para um formato legível
          if [[ -z "${artifact_size_in_bytes}" ]]; then
            artifact_size_in_bytes=$(stat -c%s "${{ env.ISO_FULLNAME }}")
          fi
          iso_size=$(numfmt --to=iec --suffix=B "${artifact_size_in_bytes}") || true

          # Prepara a mensagem
          MESSAGE="⏳ <b>[step 3/3] Job <code>#${GITHUB_RUN_NUMBER}</code> finalizado em:</b> <code>${hours}h ${minutes}m ${seconds}s</code>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-iso/edition.yml</code>
          <b>Inicio:</b> <code>${START_TIME}</code>
          <b>Fim:</b> <code>${END_TIME}</code>
          <b>Nome ISO:</b> <code>${ISO_BASENAME}</code>
          <b>Tam ISO:</b> <code>${iso_size}</code>
          <b>Download:</b> <a href='${{ env.artifact_url }}'>${file_name}.zip</a>"

          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$MESSAGE")${reset}"

          # Envia a mensagem para o Telegram com formatação HTML
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"
