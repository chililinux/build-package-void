# -*- coding: utf-8 -*-
#
#  build-package.yml
#  Created: 2024/09/15 - 08:10
#  Altered: 2024/11/19 - 01:10
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
name: üì¶ VoidLinux Build Packages

# Gatilhos para o workflow
on:
  #  push:
  #    branches:
  #      - main
  repository_dispatch: # aguarda um evento externo para iniciar o workflow (√∫til para automa√ß√µes externas que acionam o GitHub Actions).
    types:
      - "*"
      - "!aur-*"
  workflow_dispatch:
    inputs:
      branch_type:
        description: "Branch type (testing, extra or stable)"
        required: true
        type: choice
        options:
          - testing
          - extra
          - stable
      new_branch:
        description: "Nome do novo branch"
        required: true
        type: string
      tmate:
        type: boolean
        description: "With TMATE"
        required: false
        default: true
      publish_github:
        description: "Publish package on GitHub"
        type: boolean
        required: false
        default: true
      push_to_repo:
        description: "Push package to repository"
        type: boolean
        required: false
        default: true
      update_db:
        description: "Update repository database"
        type: boolean
        required: false
        default: true
      extra_command:
        description: "Extra command to run before building"
        required: false
        type: string

  schedule:
    #- cron: "0 6 * * *" # Roda todo dia √†s 06:00 UTC
    - cron: "0 18 * * 5" # Roda toda sexta-feira √†s 18:00 UTC

env:
  BRANCH_TYPE: "${{ github.event.client_payload.branch_type || github.event.inputs.branch_type }}"
  NEW_BRANCH: "${{ github.event.client_payload.branch || github.event.inputs.new_branch }}"
  PACKAGE_NAME: "${{ github.event.action }}"
  BRANCH_ORIGEM: "${{ github.ref_name }}"
  REPO_ORIGEM: "${{ github.event.client_payload.url }}"
  BRANCH_FULLNAME: "${{ github.event.client_payload.branch }}"
  TELEGRAM_TOKEN: "${{ secrets.TOKEN_BOT }}"
  #GITHUB_TOKEN: "${{ secrets.TOKEN_RELEASE }}"
  #GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_TOKEN: "${{ secrets.ORGANIZATION_TOKEN }}"
  CHAT_ID: "${{ secrets.CHAT_ID }}"
  started_by_user: "${{ github.actor }}"
  triggered_by_user: "${{ github.triggering_actor }}"
  repo_path: "${{ secrets.PKGBUILD_DIR }}"
  DEBUG: "${{ github.event.client_payload.tmate || inputs.tmate || false }}"
  tmate: "${{ github.event.client_payload.tmate || inputs.tmate || false }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }} # Sa√≠da do job
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Obter a hora atual
        id: time
        run: |
          #Obter a hora atual
          #echo "::set-output name=time::$(date +'%Y.%m.%d-%H%M')"
          echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Capturar hora de in√≠cio do workflow
        id: start-time
        shell: bash
        run: |
          START_TIME=$(date +"%Y-%m-%d %H:%M:%S")  # Hora completa
          START_TIMESTAMP=$(date +%s)  # Timestamp em segundos
          echo "In√≠cio do Workflow: $START_TIME"
          echo "START_TIME=$START_TIME"             >> $GITHUB_ENV
          echo "START_TIMESTAMP=$START_TIMESTAMP"   >> $GITHUB_ENV
          echo "START_TIME='$START_TIME'"           >> shared_file.txt
          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt

      - name: Install dependencies in HOST
        shell: bash
        run: |
          #Install dependencies in HOST
          #sudo apt-get update
          #sudo apt-get autoremove
          #sudo apt-get install -y inetutils-tools duf tree tmate
          sudo apt-get install -y inetutils-tools duf tree

      #      - name: Setup TMATE Session in HOST
      #        uses: mxschmitt/action-tmate@v3
      #        with:
      #          install-dependencies: false
      #          detached: true

      - name: Set up volume directory in HOST
        shell: bash
        run: |
          #Set up volume directory in HOST
          sudo mkdir -p /mnt/var_lib_manjaro_tools_buildiso
          sudo mkdir -p /mnt/var_cache_manjaro_tools_iso
          sudo mkdir -p /mnt/lfs

      - name: Enviar notifica√ß√£o para o Telegram
        shell: bash
        run: |
          #Enviar notifica√ß√£o para o Telegram
          started_by_user="${{ github.actor }}"
          triggered_by_user="${{ github.triggering_actor }}"
          repo_path="${{ secrets.PKGBUILD_DIR }}"
          link_action=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}

          MESSAGE="‚≠ê <b>[step 1/6] build-package-void - INICIANDO WORKFLOW DE CRIA√á√ÉO DE PACOTE</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Job URL:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>
          <b>Workflow:</b> <code>build-package-void/build-package.yml</code>
          <b>Iniciado/Triggered:</b> <code>${started_by_user}/${triggered_by_user}</code>
          <b>Inicio:</b> <code>${{ env.START_TIME }}</code>
          <b>Nome:</b> <code>${{ env.PACKAGE_NAME }}</code>
          <b>Repo Origem:</b> <code>${{ env.REPO_ORIGEM }}</code>
          <b>Branch origem:</b> <code>${{ env.BRANCH_FULLNAME }}</code>
          <b>Reposit√≥rio:</b> <code>${repo_path}</code>
          <b>Branch:</b> <code>${{ env.BRANCH_TYPE }}</code>"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"

      #      - name: Cria um arquivo de variaveis para compartilhar entre jobs
      #        shell: bash
      #        run: |
      #          #Cria um arquivo de variaveis para compartilhar entre jobs
      #          echo "START_TIME='$START_TIME'"           >> shared_file.txt
      #          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt
      #          echo "ISO_BRANCH='$iso_branch'"           >> shared_file.txt

      - name: Obter nome do reposit√≥rio
        id: get-repo-name
        run: |
          #Obter nome do reposit√≥rio
          #echo "::set-output name=repo_name::$(basename $GITHUB_REPOSITORY)"
          echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shared-file
          path: shared_file.txt

      - name: Display the current user in HOST
        run: |
          # Display the current user in host
          echo "#########################################"
          echo "Current host is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          #df -hT
          duf
          echo "#########################################"
          echo 'ls -lah --color=auto'
          ls -lah --color=auto
          echo "#########################################"
          echo 'ls -lah --color=auto /mnt'
          ls -lah --color=auto /mnt
          echo "#########################################"

  build:
    name: Build Package VoidLinux
    runs-on: ubuntu-latest
    needs: [setup] # Espera o job "setup" terminar
    env:
      #REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }} # Acesso √† vari√°vel de ambiente definida no job anterior
      REPO_NAME: "${{ github.repository }}"
    container:
      #image: vcatafesta/voidlinux-docker:latest
      #image: vcatafesta/voidlinux-docker:1.1
      image: vcatafesta/voidlinux-docker:1.4
      options: --privileged
      volumes:
        - /mnt/var_lib_manjaro_tools_buildiso:/var/lib/manjaro-tools/buildiso
        - /mnt/var_cache_manjaro_tools_iso:/var/cache/manjaro-tools/iso
        - /mnt/lfs:/mnt/lfs

    steps:
      - name: Download artifact shared-file
        uses: actions/download-artifact@v4
        with:
          name: shared-file

      - name: Exibir e carregar vari√°veis do arquivo shared_file.txt no CONTAINER
        shell: bash
        run: |
          #Exibir e carregar vari√°veis do arquivo shared_file.txt no CONTAINER
          cat shared_file.txt
          # Atribuir o conte√∫do do arquivo √† vari√°vel START_TIME
          #START_TIME="$(<shared_file.txt)"
          source shared_file.txt
          # Definir a vari√°vel START_TIME para outros jobs
          echo "START_TIME=$START_TIME"           >> $GITHUB_ENV
          echo "START_TIMESTAMP=$START_TIMESTAMP" >> $GITHUB_ENV
          echo "ISO_BRANCH=$ISO_BRANCH"           >> $GITHUB_ENV

      - name: Checkout repository chililinux/build-iso-void
        uses: actions/checkout@v4
        with:
          #fetch-depth: 0    # All commit history is downloaded
          fetch-depth: 1 # Only the most recent commit of the branch will be downloaded

      - name: Set up volume directory in CONTAINER
        run: |
          #Set up volume directory in CONTAINER
          mkdir -p /mnt/lfs
          ln -sf /mnt/lfs /lfs

      - name: Install Required Packages and Libraries no CONTAINER
        shell: bash
        run: |
          #Install Required Packages and Libraries in CONTAINER
          #{
          #echo 'repository=https://repo-fastly.voidlinux.org/current'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
          #echo 'repository=https://chililinux.com/void/current'
          #} > /etc/xbps.d/00-repository-main.conf

          xi -u --yes
          xbps-install -Syu -ff \
            xbps \
            xtools \
            bash \
            sudo \
            openssh \
            tmate \
            xz \
            zip \
            p7zip \
            jq \
            github-cli \
            kmod \
            ncurses \
            which \
            vpm \
            libstdc++ \
            nano \
            curl \
            git \
            bash \
            tree \
            duf \
            gettext \
            rsync \
            util-linux \
            coreutils \
            sed \
            grep \
            btrfs-progs \
            e2fsprogs \
            exfatprogs \
            dosfstools \
            xfsprogs
          xbps-remove -oO --yes

      - name: Create user builduser in CONTAINER
        run: |
          #Create user builduser in container
          useradd -m -G wheel,audio,video,cdrom,optical,kvm,xbuilder builduser || true
          id builduser

      - name: Set up aliases
        run: |
          cat << 'EOF' > $HOME/.bash_profile
          #
          # ~/.bash_profile
          #

          if command -v hostnamectl; then
            hostnamectl
          fi
          timenow="$(date +'%H:%M')"
          load="$(awk '{print $1 ", " $2 ", " $3}' /proc/loadavg)"

          printf '\e[0;35m%s\n\e[0m' "$logo"
          printf 'Welcome back! The time now is %s UTC\n' "$timenow"
          printf 'Server load    :  %s\n' "$load"
          printf 'Server Uptime  : %s\n' "$(uptime)"
          printf 'User           :  %s %s\n' "$(whoami)" "$(id)"
          printf '\n'

          [[ -f ~/.bashrc ]] && . ~/.bashrc
          EOF

          echo "alias ll='ls -lah --color=auto'" >> $HOME/.bashrc
          echo "alias gs='git status'"           >> $HOME/.bashrc
          # Carrega o .bashrc para aplicar os aliases na sess√£o atual
          source $HOME/.bashrc

      - name: Initial Debug in CONTAINER
        run: |
          #Initial Debug
          echo "Workflow started"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo "Edition: ${{ github.event.client_payload.edition || inputs.edition }}"
          echo "Tmate from payload: ${{ github.event.client_payload.tmate || inputs.tmate != false && inputs.tmate }}"
          echo "Full github event: ${{ toJson(github.event) }}"

      - name: Display the current user in CONTAINER
        shell: bash
        run: |
          #Display the current user in CONTAINER
          echo "#########################################"
          echo "Current container is: $(hostname)"
          echo "Current user is: $(whoami)"
          echo "Current user ID is: $(id -u)"
          echo "Current user details:"
          id
          echo "#########################################"
          #df -hT
          duf
          echo "#########################################"
          ls -lah --color=auto /mnt
          echo "#########################################"
          tree -d /mnt
          echo "#########################################"

      - name: Set release tag manually
        id: date
        run: |
          # Set release tag manually
          RELEASE_TAG="${iso_release_tag:-$(date '+%Y-%m-%d_%H-%M')}"
          echo "RELEASE_TAG=$RELEASE_TAG" >> "$GITHUB_ENV"

      - name: Setup SSH Agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
          echo "SSH_AUTH_SOCK=/tmp/ssh_agent.sock" >> $GITHUB_ENV

          # Add the repository directory as safe
      - name: Add safe directory
        run: git config --global --add safe.directory /__w/build-package-void/build-package-void

      # Set environment variables
      - name: Set ENVs
        shell: bash
        run: |
          # Set URL and git branch
          if [ -n "${{ github.event.client_payload.url }}" ]; then
            echo "url=${{ github.event.client_payload.url }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.client_payload.branch }}" ]; then
            echo "git_branch=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          fi

          # Set Manjaro branch, default to stable if not specified
          if [ -z "${{ github.event.client_payload.manjaro_branch }}" ]; then
            echo "manjaro_branch=stable" >> $GITHUB_ENV
          else
            echo "manjaro_branch=${{ github.event.client_payload.manjaro_branch }}" >> $GITHUB_ENV
          fi

          # Set Community branch, default to testing if not specified
          if [ -z "${{ github.event.client_payload.community_branch }}" ]; then
            echo "community_branch=testing" >> $GITHUB_ENV
          else
            echo "community_branch=${{ github.event.client_payload.community_branch }}" >> $GITHUB_ENV
          fi

      - name: Fetch all branches
        run: |
          git fetch --all
          git fetch origin '+refs/heads/*:refs/remotes/origin/*'

      - name: Checkout to specified branch or create if not exists
        run: |
          if git ls-remote --exit-code --heads origin ${{ env.NEW_BRANCH }}; then
            git checkout ${{ env.NEW_BRANCH }}
          else
            git checkout -b ${{ env.NEW_BRANCH }}
          fi

      - name: echo PayLoads
        shell: bash
        run: |
          echo "url: $url"
          echo "git_branch: $git_branch"
          echo "manjaro_branch: $manjaro_branch"

      - name: Build and Publish Package
        if: ${{ inputs.teste_input != true }}
        uses: ./
        with:
          # Par√¢metros relacionados ao ambiente de build e tipo de pacote
          build_env: ${{ env.BRANCH_TYPE }}
          branch_type: ${{ env.BRANCH_TYPE }}
          new_branch: ${{ env.NEW_BRANCH }}
          package_name: ${{ env.PACKAGE_NAME }}
          url: ${{ env.url }}
          git_branch: ${{ env.git_branch }}
          manjaro_branch: ${{ env.manjaro_branch }}
          repo: ${{ github.repository }}

          # Par√¢metros relacionados ao debug e tmate
          #tmate: ${{ github.event.inputs.tmate || false }}
          tmate: "${{ env.DEBUG }}"
          # Tokens e chaves de seguran√ßa
          #github_token: ${{ secrets.GITHUB_TOKEN }}
          github_token: "${{env.GITHUB_TOKEN}}"
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PASSPHRASE }}
          telegram_token: ${{ secrets.TOKEN_BOT }}
          telegram_chat_id: ${{ secrets.CHAT_ID }}

          # Par√¢metros relacionados ao reposit√≥rio
          repo_host: ${{ secrets.PKGBUILD_HOST }}
          repo_user: ${{ secrets.PKGBUILD_USER }}
          repo_port: ${{ secrets.PKGBUILD_PORT }}
          repo_dir: ${{ secrets.PKGBUILD_DIR }}

          # Op√ß√µes de publica√ß√£o e atualiza√ß√£o
          publish_github: ${{ github.event.inputs.publish_github || 'true' }}
          push_to_repo: ${{ github.event.inputs.push_to_repo || 'true' }}
          update_db: ${{ github.event.inputs.update_db || 'true' }}

          # Outros par√¢metros espec√≠ficos
          extra_command: ${{ github.event.inputs.extra_command }}

          # Passando o START_TIME para action.yml
          start_time: "${{ env.START_TIME }}"
          start_timestamp: "${{ env.START_TIMESTAMP }}"
          repo_origem: "${{ github.event.client_payload.url }}"
          branch_fullname: "${{ github.event.client_payload.branch }}"
