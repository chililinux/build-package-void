# -*- coding: utf-8 -*-
#
#  action.yml
#  Created: 2024/09/15 - 08:10
#  Altered: 2024/10/27 - 12:26
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
name: "Chililinux Package Build Action"
description: "Builds Arch/Chililinux Packages"

inputs:
  build_env:
    description: "Build environment (testing, extra, stable, or aur)"
    required: true
    default: "testing"
  source:
    description: "Custom package repo source"
    required: false
  manjaro_branch:
    description: "Manjaro branch to build"
    default: stable
    required: false
  custom_repo:
    description: "Custom repo"
    required: false
  multilib:
    description: "Build multilib package"
    required: false
    default: "false"
  repo:
    description: "Package repo"
    required: true
  gpg_key:
    description: "GPG signing key"
    required: true
  gpg_passphrase:
    description: "GPG passphrase"
    required: true
  git_branch:
    description: "Extra repository to build package"
    required: false
  extra_command:
    description: "Extra command to run before building"
    required: false
  extra_package:
    description: "Extra package to build"
    required: false
    default: "false"
  tmate:
    description: "Run tmate for debugging"
    required: false
  repo_mirror:
    description: "Mirror to use in build"
    default: repo
    required: false
  repo_dev:
    description: "Development repository"
    required: false
  pacman_mirror:
    description: "Optional: Specific mirror to override automatic selection"
    required: false
    #default: 'https://nnenix.mm.fcix.net/manjaro/stable/$repo/$arch'
    default: "https://mirrors.ocf.berkeley.edu/manjaro/stable/$repo/$arch"
  publish_github:
    description: "Publish package on GitHub"
    required: false
    default: "true"
  push_to_repo:
    description: "Push package to repository"
    required: false
    default: "true"
  update_db:
    description: "Update repository database"
    required: false
    default: "true"
  repo_host:
    description: "Repository host"
    required: false
  repo_user:
    description: "Repository user"
    required: false
  repo_port:
    description: "Repository port"
    required: false
  repo_dir:
    description: "Repository directory"
    required: false
  github_token:
    description: "GitHub token for authentication"
    required: true
  telegram_token:
    description: "Telegram bot token for notifications"
    required: false
  telegram_chat_id:
    description: "Telegram chat ID for notifications"
    required: false
  branch_type:
    description: "Branch type (testing or stable)"
    required: true
  url:
    description: "URL do repositório"
    required: false
    default: "https://github.com/chililinux/chili-skel"
  new_branch:
    description: "Nome do novo branch"
    required: false
  package_name:
    description: "Nome do pacote"
    required: false
  aur_package_dir:
    description: "Directory containing the AUR package"
    required: false
    default: "."
  start_time:
    description: "Hora de início do workflow"
    required: false
  start_timestamp:
    description: "Timestamp de início do workflow"
    required: false
  repo_origem:
    description: "Repositorio origem"
    required: false
  branch_fullname:
    description: "Nome completo do branch de origem"
    required: false

# Definição dos passos da ação
runs:
  using: "composite"
  steps:
    - name: Obter o hash do último commit do repositório remoto
      shell: bash
      run: |
        # Obter o hash do último commit do repositório remoto
        source /tmp/send_telegram_message.sh
        replicate '='
        REPO_URL="${{ inputs.url }}"
        COMMIT_HASH="$(git ls-remote $REPO_URL HEAD | awk '{print $1}')"
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        echo "Last commit hash: $COMMIT_HASH"

        # Buscar informações do commit remoto
        msg_run "git fetch $REPO_URL $COMMIT_HASH"

        # Obter a mensagem do commit a partir do hash
        COMMIT_MESSAGE="$(git log -1 --format=%B $COMMIT_HASH)"
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "Last commit message: $COMMIT_MESSAGE"
        replicate '='

    - name: Inicializando a criação de pacote
      shell: bash
      run: |
        #Inicializando a criação de pacote
        source /tmp/send_telegram_message.sh
        replicate '='
        #https://docs.github.com/pt/enterprise-server@3.10/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
        pkgname="${{ inputs.package_name }}"
        branch="${{ inputs.branch_type }}"
        repo_path="${{ inputs.repo_dir }}"
        repo_origem="${{ inputs.url }}"
        started_by_user="${{ github.actor }}"
        triggered_by_user="${{ github.triggering_actor }}"
        #pkgname_escaped=$(echo "$pkgname" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        #branch_escaped=$(echo "${branch^^}" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        pkgname_escaped="$pkgname"
        branch_escaped="${branch}"

        message="⭐ <b>[step 1/6] build-package-void - INICIANDO CRIAÇÃO DE PACOTE</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-package-void/action.yml</code>
        <b>Nome:</b> <code>${pkgname_escaped}</code>
        <b>Commit:</b> <code>${COMMIT_MESSAGE}</code>
        <b>Origem:</b> <code>${repo_origem}</code>
        <b>Iniciado/Triggered:</b> <code>${started_by_user}/${triggered_by_user}</code>
        <b>Branch:</b> <code>${branch_escaped}</code>"
        #send_telegram_message "$message"
        msg_info "$message"
        replicate '='

    - name: Debug Inputs
      shell: bash
      run: |
        # Debug Inputs
        source /tmp/send_telegram_message.sh
        replicate '='
        msg_raw "All inputs"
        msg_raw "${{ toJson(inputs) }}"
        msg_raw "build_env from input: ${{ inputs.build_env }}"
        msg_raw "build_env from env: $DEBUG_BUILD_ENV"
        msg_raw "tmate input: ${{ inputs.tmate }}"
        msg_raw "All env variables"
        msg_raw "$(env | sort)"
        replicate '='

    - name: Download Source
      shell: bash
      run: |
        # Download the source code
        source /tmp/send_telegram_message.sh
        replicate '='
        msg_run 'pushd /home/builduser/chili-void-packages/srcpkgs/'
        if [ -n "${{ inputs.url }}" ]; then
          msg_run "git clone --depth=1 ${{ inputs.url }}.git"
          msg_run "sudo chown builduser:builduser ${{ inputs.package_name }} -R" || true
          msg_run "ls -lah --color=auto ${{ inputs.package_name }}" || true
        else
          msg_warning "No URL provided, assuming we're already in the correct repository"
        fi
        replicate '='
        msg_run 'popd' || true

    - name: Build package
      shell: bash
      run: |
        # Build package - Construr pacote
        source /tmp/send_telegram_message.sh
        #set -e

        # Debug: Mostrar ambiente de build
        msg_raw "Build environment: ${{ inputs.build_env }}"
        msg_raw "Package name     : ${{ inputs.package_name }}"

        msg_run 'pushd /home/builduser/chili-void-packages/'
        replicate '='
        msg_run "ls -lah --color=auto $PWD" || true
        replicate '='

        msg_run 'echo XBPS_ALLOW_RESTRICTED=yes >> etc/conf'
        su - builduser -c './xbps-src binary-bootstrap'
        su - builduser -c "./xbps-src pkg ${inputs.package_name}"

        # Executa comando extra, se fornecido
        if [ -n "${{ inputs.extra_command }}" ]; then
          msg_raw "Executando comando extra: ${{ inputs.extra_command }}"
          eval "${{ inputs.extra_command }}"
        fi

        # Debug: Mostrar conteúdo do diretório após o build
        replicate '#'
        msg_raw "Directory contents after build:"
        msg_run 'ls -la --color=auto' || true
        replicate '#'
        msg_raw "Contents of /home/packages:"
        msg_run 'ls -la --color=auto /home/packages' || true
        replicate '#'
        msg_raw "Contents of /home/sources:"
        msg_run 'ls -la --color=auto /home/sources' || true
        replicate '#'

        die 'teste'

    - name: Sign Package
      shell: bash
      run: |
        # Sign Package
        source /tmp/send_telegram_message.sh
        msg_run 'ls -lah --color=auto'
        if [ "${{ inputs.build_env }}" == "aur" ]; then
          # Para pacotes AUR
          cd /home/packages
        else
          # Para pacotes não-AUR
          gitfolder=$(find . -name "*.zst" -exec dirname {} \;)
          if [ -z "$gitfolder" ]; then
            msg_warning "Arquivo de pacote '.zst' não encontrado. Usando diretório atual."
            gitfolder="."
          fi
          cd "$gitfolder"
        fi

        msg_run 'ls -lah --color=auto'
        # Assina todos os pacotes encontrados
        # Import GPG key
        if gpg --batch --import <<< "${{ inputs.gpg_key }}"; then
          msg_ok 'Importação da chave GPG foi bem-sucedida.'
        else
          msg_warning 'Erro na importação da chave GPG.'
          exit 1
        fi

        for p in *.zst; do
          msg_raw "Assinando pacote: $p"
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg_passphrase }}" --detach-sign "${p}"
        done

        # Lista os arquivos .sig gerados
        msg_raw 'Arquivos de assinatura gerados:'
        msg_run 'ls -lah *.sig*' || msg_warning "Nenhum arquivo .sig encontrado"

    # Gera checksums para os pacotes
    - name: Generate checksums
      shell: bash
      run: |
        source /tmp/send_telegram_message.sh
        if [ "${{ inputs.build_env }}" == "aur" ]; then
          # Para pacotes AUR
          cd /home/packages
        else
          # Para pacotes não-AUR
          gitfolder=$(find . -name "*.zst" -exec dirname {} \;)
          if [ -z "$gitfolder" ]; then
            echo "Arquivo de pacote '.zst' não encontrado. Usando diretório atual."
            gitfolder="."
          fi
          cd "$gitfolder"
        fi

        # Gera checksums para pacotes e assinaturas
        for i in *.pkg.tar.zst; do
          if [[ -f "$i" ]]; then
            msg_raw "Gerado MD5 para: $i"
            md5sum "$i"     >> "$i.md5"
            md5sum "$i.sig" >> "$i.sig.md5"
            msg_raw "MD5 gerado para: $i"
          fi
        done

        # Lista os arquivos MD5 gerados
        msg_ok "Arquivos MD5 gerados:"
        msg_run 'ls -l *.md5' || msg_warning "Nenhum arquivo MD5 encontrado"

    - name: Publish Package on GitHub
      if: inputs.publish_github == 'true' && inputs.build_env != 'aur'
      shell: bash
      run: |
        # Publish the package on GitHub
        source /tmp/send_telegram_message.sh
        gitfolder=$(find . -name "*.zst" -exec dirname {} \;)
        cd $gitfolder
        ls -lh

        # Skip linux-zen packages
        if [ -n "$(grep linux-zen <<< $gitfolder)" ];then
          exit 0
        fi

        # Determine the last committer
        lastCommit=$(git log -1 --format="%an <%ae>")
        if [ "$(grep github-actions <<< $lastCommit)" ];then
          lastCommit=$(git log -2 --format="%an <%ae>")
        fi

        # Set up GitHub authentication and determine the repository
        if [ -n "${{ inputs.url }}" ]; then
          echo "${{ inputs.github_token }}" | gh auth login --with-token
          repo=$(echo "${{ inputs.url }}" | sed 's|https://github.com/||')
        else
          echo "${{ inputs.github_token }}" | gh auth login --with-token
          repo="${{ inputs.repo }}"
        fi

        # Fallback to github.repository if repo is still empty
        if [ -z "$repo" ]; then
          repo="${{ github.repository }}"
        fi

        # Create and upload the release
        ls *.pkg* | head -n1 | sed 's/.pkg.*//' > release
        release=$(cat release)

        echo "release=$release"
        echo "repo=$repo"
        echo "url=${{ inputs.url }}"

        if [ -n "$repo" ] && [ -n "$release" ]; then
          msg_raw "Using repository: $repo"
          msg_raw "Creating release: $release"
          gh release create ${release} --title ${release} --repo ${repo} --notes "automated release from ${{ inputs.url }}" || echo "release already exists"
          for i in .zst .sig .tar .md5; do
            find -iname "*$i" -exec gh release upload ${release} --repo ${repo} --clobber {} \;
          done
        else
          msg_warning "Error: repo or release is empty"
          exit 1
        fi

    # Push the package to the repository
    - name: Push to Repo
      if: inputs.push_to_repo == 'true'
      shell: bash
      env:
        LANG: en_US.UTF-8
        LC_ALL: en_US.UTF-8
      run: |
        # Setup SSH
        source /tmp/send_telegram_message.sh
        mkdir -p /home/builduser/.ssh
        ssh-keyscan -t rsa -p ${{ inputs.repo_port }} ${{ inputs.repo_host }} >> /home/builduser/.ssh/known_hosts
        ip=${{ inputs.repo_host }}

        if [ "${{ inputs.build_env }}" == "aur" ]; then
          # Para pacotes AUR
          cd /home/packages
          branch="EXTRA"  # Todos os pacotes AUR vão para EXTRA
        else
          # Para pacotes não-AUR
          gitfolder=$(find . -name "*.zst" -exec dirname {} \;)
          cd $gitfolder

          # Determine the last committer (apenas para pacotes não-AUR)
          lastCommit=$(git log -1 --format="%an <%ae>")
          if [ "$(grep github-actions <<< $lastCommit)" ];then
            lastCommit=$(git log -2 --format="%an <%ae>")
          fi

          # Set the branch based on BRANCH_TYPE
          if [ "${{ inputs.branch_type }}" == "stable" ]; then
            branch="STABLE"
          elif [ "${{ inputs.branch_type }}" == "extra" ]; then
            branch="EXTRA"
          else
            branch="TESTING"
          fi
        fi

        ls -lh

        # Function to send Telegram message
        source /tmp/send_telegram_message.sh

        # Upload the package files
        for i in *.pkg.tar.zst; do
          pkgname=$(basename "$i")
          #pkgname_escaped=$(echo "$pkgname" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
          #branch_escaped=$(echo "$branch" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
          pkgname_escaped="$pkgname"
          branch_escaped="$branch"
          echo "PKGNAME_BASENAME=$pkgname_escaped"  >> $GITHUB_ENV
          echo "PKGNAME_BRANCH=${branch_escaped,,}" >> $GITHUB_ENV
          repo_path="${{ inputs.repo_dir }}"
          file_size_bytes=$(stat -c%s "$i")
          file_size_kb=$((file_size_bytes / 1024))
          file_size_mb=$((file_size_kb / 1024))

          message="✅ <b>[step 2/6] build-package-void - ENVIANDO 📦 PARA REPOSITÓRIO</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package-void/action.yml</code>
          <b>Pacote:</b> <code>${branch_escaped,,}/${pkgname_escaped}</code>
          <b>Tamanho b/kb/mb:</b> <code>${file_size_bytes}/${file_size_kb}k/${file_size_mb}m</code>
          <b>Repositório:</b> <code>${repo_path}</code>
          <b>Branch:</b> <code>${branch_escaped}</code>"
          send_telegram_message "$message"

          if rsync -vapz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/; then
            message="✅ <b>[step 3/6] build-package-void - Sucesso no envio do pacote</b>
            <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
            <b>Workflow:</b> <code>build-package-void/action.yml</code>
            <b>Pacote:</b> <code>${pkgname_escaped}</code>
            <b>Branch:</b> <code>${branch_escaped}</code>"
            #send_telegram_message "$message"
            :
          else
            message="❌ <b>[step 3/6] build-package-void - Falha ao enviar pacote</b>
            <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
            <b>Workflow:</b> <code>build-package-void/action.yml</code>
            <b>Pacote:</b> <code>${pkgname_escaped}</code>
            <b>Branch:</b> <code>${branch_escaped}</code>"
            send_telegram_message "$message"
          fi
        done

        for i in *.sig *.md5; do
          rsync -vapz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/
        done

    # Keeps only the most recent package
    - name: Clean Old Packages
      if: inputs.update_db == 'true' && success()
      shell: bash
      run: |
        # Function to send Telegram message
        source /tmp/send_telegram_message.sh

        # Determine the branch based on the branch type
        if [ "${{ inputs.branch_type }}" == "stable" ]; then
          branch="STABLE"
          db_name="chili-stable"
        elif [ "${{ inputs.branch_type }}" == "extra" ]; then
          branch="EXTRA"
          db_name="chili-extra"
        elif [ "${{ inputs.branch_type }}" == "aur" ] || [ "${{ inputs.branch_type }}" == "testing" ]; then
          branch="TESTING"
          db_name="chili-testing"
        else
          echo -e "${red}Error: Unknown branch type: ${{ inputs.branch_type }} ${reset}"
          exit 1
        fi

        echo "Branch: $branch"
        echo "Database name: $db_name"
        #branch_escaped=$(echo "$branch" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        branch_escaped="$branch"

        message="🧹<b>[step 4/6] Iniciando limpeza de pacotes antigos</b>
        <b>branch:</b> <code>${branch_escaped}</code>"
        #send_telegram_message "$message"

        ssh "${{ inputs.repo_user }}@${{ inputs.repo_host }}" -p "${{ inputs.repo_port }}" << 'EOF'
          cd "${{ inputs.repo_dir }}/${{ inputs.branch_type }}/x86_64"

          # Manter apenas a versão mais recente de cada pacote
          FETCH_RE='-[^-]+[0-9]+[^.]*.pkg[^.]*.tar.zst'
          PKG_EXT='pkg.tar.zst'
          AllOldPackages=$(find "$PWD" -type f -iname "*.$PKG_EXT" | sort -Vr | awk -F "$FETCH_RE" 'lista[$1]++')
          for old in ${AllOldPackages[@]}; do
            #echo -e "\033[01;31m=>Removendo pacote antigo : [$((++count))]=>${old} ${RESET}"
            echo -e "${red}=>Removendo pacote antigo : [$((++count))]=>${old} ${reset}"
            rm -fv "${old}" "${old}.sig" "${old}.md5" "${old}.sig.md5"
          done

          # Remover os bancos de dados existentes
          #rm -f $db_name.db.tar.gz $db_name.files.tar.gz

          # Recriar o banco de dados com os pacotes presentes
          #repo-add $db_name.db.tar.gz *.pkg.tar.zst

          # Remover arquivos .sig, .md5 e .sig.md5 órfãos
          for file in *.sig *.md5 *.sig.md5; do
            base_name=${file%.*}
            echo -e "\033[01;32m=>Procurando por arquivo orfão : $file ${RESET}"
            if [[ ! -f "${base_name}" ]]; then
              echo -e "\033[01;31m=>Removendo arquivo orfão : $file ${RESET}"
              rm -fv "$file"
            fi
          done
          exit_code=$?
          echo -e "${cyan}Limpeza concluída com código de saída: ${exit_code} ${reset}"
          exit $exit_code
        EOF

        if [ $? -eq 0 ]; then
          message="🧹 <b>[step 4/6] build-package-void - INICIANDO LIMPEZA DE PACOTES ANTIGOS</b>
          ✅ <b>[step 5/6] Limpeza de pacotes antigos concluída com êxito</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package-void/action.yml</code>"
          #send_telegram_message "$message"
        else
          message="🧹 <b>[step 4/6] build-package-void - INICIANDO LIMPEZA DE PACOTES ANTIGOS</b>
          ❌ <b>[step 5/6] Falha na limpeza de pacotes antigos</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package-void/action.yml</code>"
          send_telegram_message "$message"
        fi

    - name: Telegram Alert Fail
      if: failure()
      shell: bash
      run: |
        # Send a Telegram alert if the build fails
        # Function to send Telegram message
        source /tmp/send_telegram_message.sh
        link_action=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

        message="🚨 <b>FALHA ao criar pacote:</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Pacote:</b> <code>${{ github.event.action }}</code>
        <b>Branch:</b> <code>${{ github.ref_name }}</code>
        <b>URL erro:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>"
        send_telegram_message "$message"

    - name: Capturar hora de término e calcular duração
      shell: bash
      run: |
        # Function to send Telegram message
        source /tmp/send_telegram_message.sh

        START_TIME="${{ inputs.start_time }}"
        START_TIMESTAMP="${{ inputs.start_timestamp }}"
        END_TIME=$(date +"%Y-%m-%d %H:%M:%S")  # Hora completa
        END_TIMESTAMP=$(date +%s)
        duration=$((END_TIMESTAMP - START_TIMESTAMP))

        hours=$((duration / 3600))
        minutes=$(( (duration % 3600) / 60 ))
        seconds=$((duration % 60))

        message="🏆 <b>[step 6/6]build-package-void - JOB FINALIZADO EM ⏳:</b> <code>${hours}h ${minutes}m ${seconds}s</code>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-package-void/action.yml</code>
        <b>Pacote:</b> <code>${{ env.PKGNAME_BRANCH }}/${{ env.PKGNAME_BASENAME }}</code>
        <b>Inicio:</b> <code>${START_TIME}</code>
        <b>Fim   :</b> <code>${END_TIME}</code>
        <b>Tempo :</b> <code>${hours}h ${minutes}m ${seconds}s</code>"
        send_telegram_message "$message"
