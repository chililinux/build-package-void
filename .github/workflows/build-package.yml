# -*- coding: utf-8 -*-
#
#  build-package.yml
#  Created: 2024/09/15 - 08:10
#  Altered: seg 23 dez 2024 14:37:29 -04
#
#  Copyright (c) 2024-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
name: 📦 VoidLinux Build Packages

# Gatilhos para o workflow
on:
  push:
    branches:
      - main
  repository_dispatch: # aguarda um evento externo para iniciar o workflow (útil para automações externas que acionam o GitHub Actions).
    types:
      - "*"
      - "!aur-*"
  workflow_dispatch:
    inputs:
      branch_type:
        description: "Branch type (testing, extra or stable)"
        required: true
        type: choice
        options:
          - testing
          - extra
          - stable
      new_branch:
        description: "Nome do novo branch"
        required: true
        type: string
      tmate:
        type: boolean
        description: "With TMATE"
        required: false
        default: true
      publish_github:
        description: "Publish package on GitHub"
        type: boolean
        required: false
        default: true
      push_to_repo:
        description: "Push package to repository"
        type: boolean
        required: false
        default: true
      update_db:
        description: "Update repository database"
        type: boolean
        required: false
        default: true
      extra_command:
        description: "Extra command to run before building"
        required: false
        type: string

  schedule:
    #- cron: "0 6 * * *" # Roda todo dia às 06:00 UTC
    - cron: "0 18 * * 5" # Roda toda sexta-feira às 18:00 UTC

env:
  BRANCH_TYPE: "${{ github.event.client_payload.branch_type || github.event.inputs.branch_type }}"
  NEW_BRANCH: "${{ github.event.client_payload.branch || github.event.inputs.new_branch }}"
  PACKAGE_NAME: "${{ github.event.action }}"
  BRANCH_ORIGEM: "${{ github.ref_name }}"
  REPO_ORIGEM: "${{ github.event.client_payload.url }}"
  BRANCH_FULLNAME: "${{ github.event.client_payload.branch }}"
  TELEGRAM_TOKEN: "${{ secrets.TOKEN_BOT }}"
  #GITHUB_TOKEN: "${{ secrets.TOKEN_RELEASE }}"
  #GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  GITHUB_TOKEN: "${{ secrets.REPOSITORY_TOKEN }}"
  CHAT_ID: "${{ secrets.CHAT_ID }}"
  started_by_user: "${{ github.actor }}"
  triggered_by_user: "${{ github.triggering_actor }}"
  repo_path: "${{ secrets.PKGBUILD_DIR }}"
  DEBUG: "${{ github.event.client_payload.tmate || inputs.tmate }}"
  tmate: "${{ github.event.client_payload.tmate || inputs.tmate }}"
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  FULL_REPOSITORY_NAME: "${{ github.repository }}"
  REPO_NAME: "${{ github.repository }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }} # Saída do job
      REPOSITORY_NAME: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      - name: Enable namespaces on host
        run: |
          echo 1 | sudo tee /proc/sys/kernel/unprivileged_userns_clone
          echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns

      - name: Definir a função send_telegram_message no script temporário
        shell: bash
        env:
          TELEGRAM_TOKEN: "${{ inputs.telegram_token }}"
          TELEGRAM_CHAT_ID: "${{ inputs.telegram_chat_id }}"
        run: |
          #Definir a função send_telegram_message no script temporário
          cat << 'EOF' > /tmp/send_telegram_message.sh
          export TERM=${TERM:-xterm}
          export TERM=${TERM:-xterm-256color}

          #Definindo variáveis de cores
          export green="\033[01;32m"
          export red="\033[01;31m"
          export blue="\033[01;34m"
          export cyan="\033[01;36m"
          export pink="\033[01;35m"
          export yellow="\033[01;33m"
          export reset="\033[0m"
          alias ls='ls -lha --color=auto'
          alias dir='ls -lha --color=auto'

          msg_raw() {
            local msg="$1"
            msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML

            # Adiciona a cor amarela após o primeiro ':'
            if [[ "$msg" == *:* ]]; then
              local before_colon="${msg%%:*}:"
              local after_colon="${msg#*: }"
              msg="${cyan}${before_colon} ${yellow}${after_colon}${reset}"
            else
              msg="${cyan}${msg}${reset}"
            fi
            echo -e "$msg"
          }

          msg() {
            local msg="$1"
            msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
            echo -e "BIV=>${cyan}running: ${yellow}${msg}${reset}"
          }

          msg_raw() {
            local msg="$1"
            msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
            echo -e "${cyan}${msg}${reset}"
          }

          msg_info() {
            local msg="$1"
            msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
            echo -e "BIV=>${yellow}info   : ${cyan}${msg}${reset}"
          }

          msg_warning() {
            local msg="$1"
            msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
            echo -e "BIV=>${red}warning: ${orange}${msg}${reset}"
          }

          replicate() {
            local char=${1:-'#'}
            local nsize=${2:-$(tput cols)}
            local line
            #printf -v line "%*s" "$nsize" && echo "${line// /$char}"
            #printf -v line "%*s" "$nsize" && echo -e "\033[31m${line// /$char}\033[0m"
            printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
          }
          export -f replicate

          send_telegram_message() {
            local message="$1"
            local parse_mode="$2"

            # Define parse_mode como "MarkdownV2" se não for especificado
            [[ -z $parse_mode ]] && parse_mode="HTML"

            # Remove as tags HTML e exibe o resultado no terminal
            echo -e "${red}$(sed 's/<[^>]*>//g' <<< "$message")${reset}"
            # Envia a mensagem original com HTML para o Telegram
            curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
              -d chat_id="${{ inputs.telegram_chat_id }}" \
              -d text="$message" \
              -d parse_mode="$parse_mode"
          }
          export -f send_telegram_message
          EOF

      - name: Obter a hora atual
        id: time
        shell: bash
        run: |
          #Obter a hora atual
          #echo "::set-output name=time::$(date +'%Y.%m.%d-%H%M')"
          echo "time=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Capturar hora de início do workflow e/ou outras variáveis
        id: start-time
        shell: bash
        run: |
          #Capturar hora de início do workflow e/ou outras variáveis
          source /tmp/send_telegram_message.sh
          START_TIME=$(date +"%Y-%m-%d %H:%M:%S")  # Hora completa
          START_TIMESTAMP=$(date +%s)              # Timestamp em segundos
          echo "START_TIME=$START_TIME"             >> $GITHUB_ENV
          echo "START_TIME='$START_TIME'"           >> shared_file.txt
          echo "START_TIMESTAMP=$START_TIMESTAMP"   >> $GITHUB_ENV
          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt
          echo "SHORT_REPOSITORY_NAME=${FULL_REPOSITORY_NAME##*/}"   >> $GITHUB_ENV
          echo "SHORT_REPOSITORY_NAME='${FULL_REPOSITORY_NAME##*/}'" >> shared_file.txt
          replicate '#'
          msg_raw "START_TIME           : $START_TIME"
          msg_raw "START_TIMESTAMP      : $START_TIMESTAMP"
          msg_raw "SHORT_REPOSITORY_NAME: $SHORT_REPOSITORY_NAME"
          replicate '#'

      - name: Install dependencies in HOST
        shell: bash
        run: |
          #Install dependencies in HOST
          source /tmp/send_telegram_message.sh
          replicate '#'
          sudo apt-get update
          sudo apt-get autoremove
          #sudo apt-get install -y inetutils-tools duf tree tmate
          sudo apt-get install -y inetutils-tools duf tree
          replicate '#'

      #      - name: Setup TMATE Session in HOST
      #        uses: mxschmitt/action-tmate@v3
      #        with:
      #          install-dependencies: false
      #          detached: true

      - name: Set up volume directory in HOST
        shell: bash
        run: |
          #Set up volume directory in HOST
          source /tmp/send_telegram_message.sh
          replicate '#'
          msg_info 'sudo mkdir -p /mnt/var_lib_manjaro_tools_buildiso'
          msg_info 'sudo mkdir -p /mnt/var_cache_manjaro_tools_iso'
          msg_info 'sudo mkdir -p /mnt/lfs'
          sudo mkdir -p /mnt/var_lib_manjaro_tools_buildiso
          sudo mkdir -p /mnt/var_cache_manjaro_tools_iso
          sudo mkdir -p /mnt/lfs
          msg_info 'tree -d /mnt'
          tree -d /mnt || true
          replicate '#'

      - name: Enviar notificação para o Telegram
        shell: bash
        run: |
          #Enviar notificação para o Telegram
          started_by_user="${{ github.actor }}"
          triggered_by_user="${{ github.triggering_actor }}"
          repo_path="${{ secrets.PKGBUILD_DIR }}"
          link_action=https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}

          MESSAGE="⭐ <b>[step 1/6] ${{env.SHORT_REPOSITORY_NAME}} - INICIANDO WORKFLOW DE CRIAÇÃO DE PACOTE</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Job URL:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>
          <b>Workflow:</b> <code>${{env.SHORT_REPOSITORY_NAME}}/build-package.yml</code>
          <b>Iniciado/Triggered:</b> <code>${started_by_user}/${triggered_by_user}</code>
          <b>Inicio:</b> <code>${{ env.START_TIME }}</code>
          <b>Nome:</b> <code>${{ env.PACKAGE_NAME }}</code>
          <b>Repo Origem:</b> <code>${{ env.REPO_ORIGEM }}</code>
          <b>Branch origem:</b> <code>${{ env.BRANCH_FULLNAME }}</code>
          <b>Repositório:</b> <code>${repo_path}</code>
          <b>Branch:</b> <code>${{ env.BRANCH_TYPE }}</code>"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="HTML"

      #      - name: Cria um arquivo de variaveis para compartilhar entre jobs
      #        shell: bash
      #        run: |
      #          #Cria um arquivo de variaveis para compartilhar entre jobs
      #          echo "START_TIME='$START_TIME'"           >> shared_file.txt
      #          echo "START_TIMESTAMP='$START_TIMESTAMP'" >> shared_file.txt
      #          echo "ISO_BRANCH='$iso_branch'"           >> shared_file.txt

      - name: Obter nome do repositório
        id: get-repo-name
        run: |
          #Obter nome do repositório
          #echo "::set-output name=repo_name::$(basename $GITHUB_REPOSITORY)"
          echo "repo_name=$(basename $GITHUB_REPOSITORY)" >> $GITHUB_OUTPUT

      - name: Upload shared_file.txt
        uses: actions/upload-artifact@v4
        with:
          name: shared-file
          path: shared_file.txt

      - name: Upload send_telegram_message.sh
        uses: actions/upload-artifact@v4
        with:
          name: send-telegram-script
          path: /tmp/send_telegram_message.sh

      - name: Display the current user in HOST
        shell: bash
        run: |
          # Display the current user in host
          source /tmp/send_telegram_message.sh
          replicate '='
          msg_raw "Current host is     : $(hostname)"
          msg_raw "Current user is     : $(whoami)"
          msg_raw "Current user ID is  : $(id -u)"
          msg_raw "Current user details: $(id)"
          replicate '='
          duf || true
          replicate '='
          echo 'ls -lha --color=auto /mnt || true'
          ls -lha --color=auto /mnt || true
          replicate '='

  build:
    name: Build Package VoidLinux
    runs-on: ubuntu-latest
    needs: [setup] # Espera o job "setup" terminar
    env:
      #REPO_NAME: ${{ needs.set-repo-name.outputs.REPOSITORY_NAME }} # Acesso à variável de ambiente definida no job anterior
      REPO_NAME: "${{ github.repository }}"
    container:
      #image: vcatafesta/voidlinux-docker:latest
      #image: vcatafesta/voidlinux-docker:1.1
      image: vcatafesta/voidlinux-docker:1.4
      options: --privileged
      volumes:
        - /mnt/var_lib_manjaro_tools_buildiso:/var/lib/manjaro-tools/buildiso
        - /mnt/var_cache_manjaro_tools_iso:/var/cache/manjaro-tools/iso
        - /mnt/lfs:/mnt/lfs
    steps:
      - name: Setup TMATE Session
        uses: mxschmitt/action-tmate@v3
        if: ${{ env.DEBUG }}
        with:
          install-dependencies: false
          detached: true

      - name: Download artifact shared-file
        uses: actions/download-artifact@v4
        with:
          name: shared-file

      - name: Baixar artifact send-telegram-script
        uses: actions/download-artifact@v4
        with:
          name: send-telegram-script

      - name: Tornar o script executável e mover o script para /tmp/
        run: |
          #Tornar o script executável e mover o script para /tmp/
          chmod +x send_telegram_message.sh
          mkdir -p /tmp
          mv send_telegram_message.sh /tmp/

      - name: Exibir e carregar variáveis do arquivo shared_file.txt no CONTAINER
        shell: bash
        run: |
          #Exibir e carregar variáveis do arquivo shared_file.txt no CONTAINER
          cat shared_file.txt
          # Atribuir o conteúdo do arquivo à variável START_TIME
          #START_TIME="$(<shared_file.txt)"
          source shared_file.txt
          # Definir a variável START_TIME para outros jobs
          echo "START_TIME=$START_TIME"                       >> $GITHUB_ENV
          echo "START_TIMESTAMP=$START_TIMESTAMP"             >> $GITHUB_ENV
          echo "ISO_BRANCH=$ISO_BRANCH"                       >> $GITHUB_ENV
          echo "SHORT_REPOSITORY_NAME=$SHORT_REPOSITORY_NAME" >> $GITHUB_ENV

      - name: Create user builduser in CONTAINER
        run: |
          #Create user builduser in container
          useradd -m -G wheel,audio,video,cdrom,optical,kvm,xbuilder builduser || true
          id builduser

      - name: Checkout repository chililinux/build-iso-void
        uses: actions/checkout@v4
        with:
          #fetch-depth: 0    # All commit history is downloaded
          fetch-depth: 1 # Only the most recent commit of the branch will be downloaded
      - name: Sync UID/GID
        run: |
          USER_ID=$(id -u)
          GROUP_ID=$(id -g)

          if [ "$GROUP_ID" -ne 0 ]; then
            groupadd -g "$GROUP_ID" hostgroup
          else
            echo "Skipping groupadd: GID 0 is already assigned to root"
          fi

          if [ "$USER_ID" -ne 0 ]; then
            useradd -u "$USER_ID" -g "${GROUP_ID:-root}" hostuser
            chown -R hostuser:${GROUP_ID:-root} /mnt/var_lib_manjaro_tools_buildiso \
                                                 /mnt/var_cache_manjaro_tools_iso \
                                                 /mnt/lfs
          else
            echo "Skipping useradd: UID 0 is already assigned to root"
          fi

      - name: Ajustando work_dir
        run: |
          #Ajustando work_dir
          ln -sf /__w/${{env.SHORT_REPOSITORY_NAME}}/${{env.SHORT_REPOSITORY_NAME}} /work_dir
          echo "WORK_DIR=/work_dir" >> $GITHUB_ENV

      - name: Set up volume directory in CONTAINER
        run: |
          #Set up volume directory in CONTAINER
          mkdir -p /mnt/lfs
          ln -sf /mnt/lfs /lfs

      - name: Install Required Packages and Libraries no CONTAINER
        shell: bash
        run: |
          #Install Required Packages and Libraries in CONTAINER
          #{
          #echo 'repository=https://repo-fastly.voidlinux.org/current'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
          #echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
          #echo 'repository=https://chililinux.com/void/current'
          #} > /etc/xbps.d/00-repository-main.conf

          xi -u --yes
          #xbps-install -Syu -ff xbps xtools bash sudo openssh tmate \
          #  xz zip p7zip jq github-cli kmod ncurses which vpm libstdc++ \
          #  nano curl git bash tree duf gettext rsync util-linux coreutils \
          #  sed grep btrfs-progs e2fsprogs exfatprogs dosfstools xfsprogs
          xbps-remove -oO --yes

      - name: Initial Debug in CONTAINER
        shell: bash
        run: |
          #Initial Debug
          source /tmp/send_telegram_message.sh
          replicate '='
          msg_raw "Workflow started"
          msg_raw "Event Name: ${{ github.event_name }}"
          msg_raw "Event Action: ${{ github.event.action }}"
          msg_raw "Edition: ${{ github.event.client_payload.edition || inputs.edition }}"
          msg_raw "Tmate from payload: ${{ github.event.client_payload.tmate || inputs.tmate != false && inputs.tmate }}"
          msg_raw "Full github event: ${{ toJson(github.event) }}"
          replicate '='

      - name: Display the current user in CONTAINER
        shell: bash
        run: |
          #Display the current user in CONTAINER
          source /tmp/send_telegram_message.sh
          replicate '#'
          msg_raw "Current container is: $(hostname)"
          msg_raw "Current user is     : $(whoami)"
          msg_raw "Current user ID is  : $(id -u)"
          msg_raw "Current user details: $(id)"
          replicate '#'
          duf || true
          replicate '#'
          msg_raw 'tree -d /mnt'
          tree -d /mnt
          replicate '#'
          msg_raw 'ls -lah --color=auto /'
          ls -lah --color=auto /
          replicate '#'

      - name: Set release tag manually
        id: date
        run: |
          # Set release tag manually
          echo "RELEASE_TAG=$(date '+%Y-%m-%d_%H-%M')" >> "$GITHUB_ENV"

      - name: Mark repository as safe
        shell: bash
        run: |
          # Mark repository as safe
          git config --global --add safe.directory /__w/${{ env.SHORT_REPOSITORY_NAME }}/${{ env.SHORT_REPOSITORY_NAME }}

      # Set environment variables
      - name: Set ENVs
        shell: bash
        run: |
          # Set URL and git branch
          if [ -n "${{ github.event.client_payload.url }}" ]; then
            echo "url=${{ github.event.client_payload.url }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.client_payload.branch }}" ]; then
            echo "git_branch=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          fi

          # Set Manjaro branch, default to stable if not specified
          if [ -z "${{ github.event.client_payload.manjaro_branch }}" ]; then
            echo "manjaro_branch=stable" >> $GITHUB_ENV
          else
            echo "manjaro_branch=${{ github.event.client_payload.manjaro_branch }}" >> $GITHUB_ENV
          fi

          # Set Community branch, default to testing if not specified
          if [ -z "${{ github.event.client_payload.community_branch }}" ]; then
            echo "community_branch=testing" >> $GITHUB_ENV
          else
            echo "community_branch=${{ github.event.client_payload.community_branch }}" >> $GITHUB_ENV
          fi

      - name: Fetch all branches
        shell: bash
        run: |
          #Fetch all branches
          git fetch --all
          git fetch origin '+refs/heads/*:refs/remotes/origin/*'

      - name: Checkout to specified branch or create if not exists
        shell: bash
        run: |
          #Checkout to specified branch or create if not exists
          if git ls-remote --exit-code --heads origin ${{ env.NEW_BRANCH }}; then
            git checkout ${{ env.NEW_BRANCH }}
          else
            git checkout -b ${{ env.NEW_BRANCH }}
          fi

      - name: echo PayLoads
        shell: bash
        run: |
          #echo PayLoads
          source /tmp/send_telegram_message.sh
          replicate '='
          msg_raw "url           : $url"
          msg_raw "git_branch    : $git_branch"
          msg_raw "manjaro_branch: $manjaro_branch"
          replicate '='

      - name: Build and Publish Package
        if: ${{ inputs.teste_input != true }}
        uses: ./
        with:
          # Parâmetros relacionados ao ambiente de build e tipo de pacote
          build_env: ${{ env.BRANCH_TYPE }}
          branch_type: ${{ env.BRANCH_TYPE }}
          new_branch: ${{ env.NEW_BRANCH }}
          package_name: ${{ env.PACKAGE_NAME }}
          #url: ${{ env.url }}
          url: "https://github.com/chililinux/chili-skel"
          git_branch: ${{ env.git_branch }}
          manjaro_branch: ${{ env.manjaro_branch }}
          repo: ${{ github.repository }}

          # Parâmetros relacionados ao debug e tmate
          #tmate: ${{ github.event.inputs.tmate || false }}
          tmate: "${{ env.DEBUG }}"
          # Tokens e chaves de segurança
          #github_token: ${{ secrets.GITHUB_TOKEN }}
          github_token: "${{env.GITHUB_TOKEN}}"
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PASSPHRASE }}
          telegram_token: ${{ secrets.TOKEN_BOT }}
          telegram_chat_id: ${{ secrets.CHAT_ID }}

          # Parâmetros relacionados ao repositório
          repo_host: ${{ secrets.PKGBUILD_HOST }}
          repo_user: ${{ secrets.PKGBUILD_USER }}
          repo_port: ${{ secrets.PKGBUILD_PORT }}
          repo_dir: ${{ secrets.PKGBUILD_DIR }}

          # Opções de publicação e atualização
          publish_github: ${{ github.event.inputs.publish_github || 'true' }}
          push_to_repo: ${{ github.event.inputs.push_to_repo || 'true' }}
          update_db: ${{ github.event.inputs.update_db || 'true' }}

          # Outros parâmetros específicos
          extra_command: ${{ github.event.inputs.extra_command }}

          # Passando o START_TIME para action.yml
          start_time: "${{ env.START_TIME }}"
          start_timestamp: "${{ env.START_TIMESTAMP }}"
          repo_origem: "${{ github.event.client_payload.url }}"
          branch_fullname: "${{ github.event.client_payload.branch }}"
